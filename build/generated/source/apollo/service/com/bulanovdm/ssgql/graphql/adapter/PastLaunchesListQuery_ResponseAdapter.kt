//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.5.0'.
//
package com.bulanovdm.ssgql.graphql.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.bulanovdm.ssgql.graphql.PastLaunchesListQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object PastLaunchesListQuery_ResponseAdapter {
  public object Data : Adapter<PastLaunchesListQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("launchesPast")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PastLaunchesListQuery.Data {
      var _launchesPast: List<PastLaunchesListQuery.LaunchesPast?>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _launchesPast = LaunchesPast.obj().nullable().list().nullable().fromJson(reader,
              customScalarAdapters)
          else -> break
        }
      }

      return PastLaunchesListQuery.Data(
        launchesPast = _launchesPast
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PastLaunchesListQuery.Data,
    ): Unit {
      writer.name("launchesPast")
      LaunchesPast.obj().nullable().list().nullable().toJson(writer, customScalarAdapters,
          value.launchesPast)
    }
  }

  public object LaunchesPast : Adapter<PastLaunchesListQuery.LaunchesPast> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "mission_id", "links", "rocket",
        "launch_date_utc")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PastLaunchesListQuery.LaunchesPast {
      var _id: String? = null
      var _mission_id: List<String?>? = null
      var _links: PastLaunchesListQuery.Links? = null
      var _rocket: PastLaunchesListQuery.Rocket? = null
      var _launch_date_utc: Any? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _mission_id = NullableStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          2 -> _links = Links.obj().nullable().fromJson(reader, customScalarAdapters)
          3 -> _rocket = Rocket.obj().nullable().fromJson(reader, customScalarAdapters)
          4 -> _launch_date_utc = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PastLaunchesListQuery.LaunchesPast(
        id = _id,
        mission_id = _mission_id,
        links = _links,
        rocket = _rocket,
        launch_date_utc = _launch_date_utc
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PastLaunchesListQuery.LaunchesPast,
    ): Unit {
      writer.name("id")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("mission_id")
      NullableStringAdapter.list().nullable().toJson(writer, customScalarAdapters, value.mission_id)

      writer.name("links")
      Links.obj().nullable().toJson(writer, customScalarAdapters, value.links)

      writer.name("rocket")
      Rocket.obj().nullable().toJson(writer, customScalarAdapters, value.rocket)

      writer.name("launch_date_utc")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.launch_date_utc)
    }
  }

  public object Links : Adapter<PastLaunchesListQuery.Links> {
    public val RESPONSE_NAMES: List<String> = listOf("flickr_images", "mission_patch_small")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PastLaunchesListQuery.Links {
      var _flickr_images: List<String?>? = null
      var _mission_patch_small: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _flickr_images = NullableStringAdapter.list().nullable().fromJson(reader,
              customScalarAdapters)
          1 -> _mission_patch_small = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PastLaunchesListQuery.Links(
        flickr_images = _flickr_images,
        mission_patch_small = _mission_patch_small
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PastLaunchesListQuery.Links,
    ): Unit {
      writer.name("flickr_images")
      NullableStringAdapter.list().nullable().toJson(writer, customScalarAdapters,
          value.flickr_images)

      writer.name("mission_patch_small")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.mission_patch_small)
    }
  }

  public object Rocket : Adapter<PastLaunchesListQuery.Rocket> {
    public val RESPONSE_NAMES: List<String> = listOf("rocket_name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        PastLaunchesListQuery.Rocket {
      var _rocket_name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _rocket_name = NullableStringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return PastLaunchesListQuery.Rocket(
        rocket_name = _rocket_name
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: PastLaunchesListQuery.Rocket,
    ): Unit {
      writer.name("rocket_name")
      NullableStringAdapter.toJson(writer, customScalarAdapters, value.rocket_name)
    }
  }
}
